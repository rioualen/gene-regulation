# Set parameters
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "bPeaks" in config.keys():
    config["bPeaks"] = {}

if not "IPcoeff" in config["bPeaks"].keys():
    config["bPeaks"]["IPcoeff"] = "2"

if not "controlCoeff" in config["bPeaks"].keys():
    config["bPeaks"]["controlCoeff"] = "2"

if not "log2FC" in config["bPeaks"].keys():
    config["bPeaks"]["log2FC"] = "2"

if not "averageQuantiles" in config["bPeaks"].keys():
    config["bPeaks"]["averageQuantiles"] = "0.9"

if not "windowSize" in config["bPeaks"].keys():
    config["bPeaks"]["windowSize"] = "150"

if not "windowOverlap" in config["bPeaks"].keys():
    config["bPeaks"]["windowOverlap"] = "50"

if not "samples" in config["dir"].keys():
    sys.exit("The sample dir must be defined in the config file")

if not "peaks" in config["dir"].keys():
    sys.exit("The peaks dir must be defined in the config file")

dir_samples = config["dir"]["samples"]
dir_bPeaks = os.path.join(config["dir"]["peaks"], "{treatment}_vs_{control}/bPeaks")

# Rule
rule bPeaks:
    """
    bPeaks is a peak-calling tool running in R.
    It was specifically designed for small eucaryotic organisms, such as the yeast.
    It is thus not recommanded for bigger genomes, as it could be very slow. 
    You should choose parameters carefully. Input in bam, output in bed.

    Required parameters:
        config["qsub"]
        config["dir"]["samples"]
        config["dir"]["peaks"]

    Optional parameters:
        config["bPeaks"]["IPcoeff"]
        config["bPeaks"]["controlCoeff"]
        config["bPeaks"]["log2FC"]
        config["bPeaks"]["averageQuantiles"]
        config["bPeaks"]["windowSize"]
        config["bPeaks"]["windowOverlap"]

    Copyright: 
        Claire Rioualen
    """
    input:
        treatment = dir_samples + "/{treatment}/{treatment}{preprocess,.*}_sorted_pos.bam", \
        control = dir_samples + "/{control}/{control}{preprocess,.*}_sorted_pos.bam"
    output: 
        peaks_bed = dir_bPeaks + "/{treatment}_vs_{control}{preprocess,.*}_bPeaks.bed"
    params:
        outdir = dir_bPeaks, \
        name = "{treatment}_vs_{control}{preprocess,.*}", \
        IPcoeff = config["bPeaks"]["IPcoeff"], \
        controlCoeff = config["bPeaks"]["controlCoeff"], \
        log2FC = config["bPeaks"]["log2FC"], \
        averageQuantiles = config["bPeaks"]["averageQuantiles"], \
        windowSize = config["bPeaks"]["windowSize"], \
        windowOverlap = config["bPeaks"]["windowOverlap"], \
        qsub=config["qsub"] \
          + " -e " + dir_bPeaks + "/{treatment}_vs_{control}/bPeaks/{treatment}_vs_{control}{preprocess,.*}_bPeaks_qsub.err" \
          + " -o " + dir_bPeaks + "/{treatment}_vs_{control}/bPeaks/{treatment}_vs_{control}{preprocess,.*}_bPeaks_qsub.out"
    log: config["dir"]["peaks"] + "/{treatment}_vs_{control}/bPeaks/{treatment}_vs_{control}{preprocess,.*}_bPeaks.log"
    benchmark: config["dir"]["peaks"] + "/{treatment}_vs_{control}/bPeaks/{treatment}_vs_{control}{preprocess,.*}_bPeaks_benchmark.txt"
    run:
        shell("mkdir {params.outdir}") ## to remove
        R("""sink("{log}")

        library("bPeaks")

        setwd(".")

        system("genomeCoverageBed -ibam {input.control} -d > {params.outdir}/INPUT_genomeCoverage.txt")
        system("genomeCoverageBed -ibam {input.treatment} -d > {params.outdir}/IP_genomeCoverage.txt")

        setwd("{params.outdir}")

        seqResult = dataReading("IP_genomeCoverage.txt", "INPUT_genomeCoverage.txt")

        bPeaksAnalysis(IPdata = seqResult$IPdata, controlData = seqResult$controlData, 
        IPcoeff={params.IPcoeff}, controlCoeff={params.controlCoeff}, log2FC={params.log2FC}, averageQuantiles={params.averageQuantiles}, windowSize={params.windowSize}, windowOverlap={params.windowOverlap}, 
        peakDrawing = FALSE, resultName="{params.name}")

        file.rename("{params.name}_bPeaks_allGenome.bed", "{output.peaks_bed}")

        sink()

        """)
