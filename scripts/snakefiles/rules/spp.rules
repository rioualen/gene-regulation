# Set parameters
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "spp" in config.keys():
    config["spp"] = {}

if not "fdr" in config["spp"].keys():
    config["spp"]["fdr"] = "0.01"

#if not "type" in config["spp"].keys():
#    config["spp"]["type"] = "narrow"

dir_samples = config["dir"]["samples"]
dir_spp = os.path.join(config["dir"]["peaks"], "{treatment}_vs_{control}/spp")

# Rule
rule spp:
    """Peak-calling with SPP (R package).
        Input: bam
        Output: narrowPeak + bed format

    Required parameters:
        config["qsub"]
        config["dir"]["samples"]
        config["dir"]["peaks"]

    Optional parameters:
        config["spp"]["fdr"]

    Copyright Claire Rioualen
    """
    input:
        treatment = dir_samples + "/{treatment}/{treatment}{preprocess,.*}_sorted_pos.bam",
        control = dir_samples + "/{control}/{control}{preprocess,.*}_sorted_pos.bam"
    output:
        peaks_narrowPeak = dir_spp + "/{treatment}_vs_{control}{preprocess,.*}_spp_peaks.narrowPeak",
        peaks_bed = dir_spp + "/{treatment}_vs_{control}{preprocess,.*}_spp.bed",
        pdf = dir_spp + "/{treatment}_vs_{control}{preprocess,.*}_spp.crosscorrelation.pdf",
        sm_density_wig = dir_spp + "/{treatment}_vs_{control}{preprocess,.*}_spp.smoothed.density.wig",
        enrich_est_wig = dir_spp + "/{treatment}_vs_{control}{preprocess,.*}_spp.enrichment.estimates.wig",
        peaks_broadPeak = dir_spp + "/{treatment}_vs_{control}{preprocess,.*}_spp.broadPeak",
        bdg_positions = dir_spp + "/{treatment}_vs_{control}{preprocess,.*}_spp.binding.positions.txt"
    params:
        fdr = config["spp"]["fdr"],
        qsub=config["qsub"] \
          + " -e " + dir_spp + "/{treatment}_vs_{control}{preprocess,.*}_spp_qsub.err" \
          + " -o " + dir_spp + "/{treatment}_vs_{control}{preprocess,.*}_spp_qsub.out"
    log: dir_spp + "/{treatment}_vs_{control}{preprocess,.*}_spp.log"
    benchmark: dir_spp + "/{treatment}_vs_{control}{preprocess,.*}_spp_benchmark.json"
    run:
        R("""sink("{log}")

        library(caTools)
        library(Rsamtools)
        library(spp)
        print(sessionInfo())

        getwd()


        treatment.data <- read.bam.tags("{input.treatment}")
        control.data <- read.bam.tags("{input.control}")

        binding.characteristics <- get.binding.characteristics(treatment.data,srange=c(50,500),bin=5, accept.all.tags = T) 

        pdf(file="{output.pdf}",width=5,height=5)
        par(mar = c(3.5,3.5,1.0,0.5), mgp = c(2,0.65,0), cex = 0.8)
        plot(binding.characteristics$cross.correlation,type='l',xlab="strand shift",ylab="cross-correlation")
        abline(v=binding.characteristics$peak$x,lty=2,col=2)
        dev.off()

        treatment.data.info <- select.informative.tags(treatment.data)
        control.data.info <- select.informative.tags(control.data)

        treatment.data.qua <- remove.local.tag.anomalies(treatment.data.info)
        control.data.qua <- remove.local.tag.anomalies(control.data.info)

        tag.shift <- round(binding.characteristics$peak$x/2)
        smoothed.density <- get.smoothed.tag.density(treatment.data.qua,control.tags=control.data.qua,bandwidth=200,step=100,tag.shift=tag.shift)
        writewig(smoothed.density,"{output.sm_density_wig}","s_1 smoothed, background-subtracted tag density")

        enrichment.estimates <- get.conservative.fold.enrichment.profile(treatment.data.qua,control.data.qua,fws=500,step=100,alpha=0.01)
        writewig(enrichment.estimates,"{output.enrich_est_wig}","conservative fold-enrichment/depletion estimates shown on log2 scale")

        broad.clusters <- get.broad.enrichment.clusters(treatment.data.qua, control.data.qua, window.size=1e3, z.thr=3,tag.shift=round(binding.characteristics$peak$x/2))
        write.broadpeak.info(broad.clusters,"{output.peaks_broadPeak}")

        fdr <- {params.fdr}
        detection.window.halfsize <- binding.characteristics$whs;
        bp <- find.binding.positions(signal.data=treatment.data.qua,control.data=control.data.qua,fdr=fdr,whs=detection.window.halfsize)
        print(paste("detected",sum(unlist(lapply(bp$npl,function(d) length(d$x)))),"peaks"))
        output.binding.results(bp,"{output.bdg_positions}");

        #bp <- add.broad.peak.regions(treatment.data.qua, control.data.qua, bp, window.size=1000,z.thr=3)
        write.narrowpeak.binding(bp,"{output.peaks_narrowPeak}")

        bed <- read.table("{output.peaks_narrowPeak}")

        # replace neg values with 0
        for(i in 1:nrow(bed)){{
            if(bed[i,2] < 0){{
                bed[i,2] <- 0
            }}
        }}

        write.table(bed, "{output.peaks_bed}", row.names=FALSE, col.names=FALSE, sep="\t", quote=FALSE)

        sink()
        """) 
